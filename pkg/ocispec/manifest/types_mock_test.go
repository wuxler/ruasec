// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wuxler/ruasec/pkg/ocispec/manifest (interfaces: ImageManifest)
//
// Generated by this command:
//
//	mockgen -destination=./types_mock_test.go -package=manifest_test github.com/wuxler/ruasec/pkg/ocispec/manifest ImageManifest
//

// Package manifest_test is a generated GoMock package.
package manifest_test

import (
	reflect "reflect"

	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	manifest "github.com/wuxler/ruasec/pkg/ocispec/manifest"
	gomock "go.uber.org/mock/gomock"
)

// MockImageManifest is a mock of ImageManifest interface.
type MockImageManifest struct {
	ctrl     *gomock.Controller
	recorder *MockImageManifestMockRecorder
}

// MockImageManifestMockRecorder is the mock recorder for MockImageManifest.
type MockImageManifestMockRecorder struct {
	mock *MockImageManifest
}

// NewMockImageManifest creates a new mock instance.
func NewMockImageManifest(ctrl *gomock.Controller) *MockImageManifest {
	mock := &MockImageManifest{ctrl: ctrl}
	mock.recorder = &MockImageManifestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageManifest) EXPECT() *MockImageManifestMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockImageManifest) Config() v1.Descriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(v1.Descriptor)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockImageManifestMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockImageManifest)(nil).Config))
}

// Layers mocks base method.
func (m *MockImageManifest) Layers() []manifest.LayerDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Layers")
	ret0, _ := ret[0].([]manifest.LayerDescriptor)
	return ret0
}

// Layers indicates an expected call of Layers.
func (mr *MockImageManifestMockRecorder) Layers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Layers", reflect.TypeOf((*MockImageManifest)(nil).Layers))
}

// MediaType mocks base method.
func (m *MockImageManifest) MediaType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MediaType")
	ret0, _ := ret[0].(string)
	return ret0
}

// MediaType indicates an expected call of MediaType.
func (mr *MockImageManifestMockRecorder) MediaType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MediaType", reflect.TypeOf((*MockImageManifest)(nil).MediaType))
}

// Payload mocks base method.
func (m *MockImageManifest) Payload() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Payload indicates an expected call of Payload.
func (mr *MockImageManifestMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockImageManifest)(nil).Payload))
}

// References mocks base method.
func (m *MockImageManifest) References() []v1.Descriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "References")
	ret0, _ := ret[0].([]v1.Descriptor)
	return ret0
}

// References indicates an expected call of References.
func (mr *MockImageManifestMockRecorder) References() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "References", reflect.TypeOf((*MockImageManifest)(nil).References))
}
