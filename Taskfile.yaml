version: "3"

vars:
  BIN: "{{.ROOT_DIR}}/bin"
  BIN_PREFIX: "env PATH={{.BIN}}:$PATH"
  OUTPUT: "{{.ROOT_DIR}}/dist"
  DATE: '{{ dateInZone "2006-01-02T15:04:05Z07:00" nil "Local" }}' # RFC3339
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GIT_BRANCH:
    sh: git rev-parse --symbolic-full-name --verify --quiet --abbrev-ref HEAD
  GIT_TREE_STATE:
    sh: if [ -z "$(git status --porcelain)" ]; then echo "clean"; else echo "dirty"; fi
  GIT_EXACT_TAG:
    sh: git describe --tags --exact-match 2> /dev/null || true
  GIT_LATEST_TAG:
    sh: git describe --tags --abbrev=0 2> /dev/null || true
  GIT_TAG: "{{if .GIT_EXACT_TAG}}{{.GIT_EXACT_TAG}}{{else if .GIT_LATEST_TAG}}{{.GIT_LATEST_TAG}}-next{{end}}"

env:
  CGO_ENABLED: "0"

tasks:
  default:
    cmds:
      - task: lint
      - task: test

  vars:
    desc: Output variables
    silent: true
    cmds:
      - 'echo "DATE          : {{.DATE}}"'
      - 'echo "GIT_COMMIT    : {{.GIT_COMMIT}}"'
      - 'echo "GIT_BRANCH    : {{.GIT_BRANCH}}"'
      - 'echo "GIT_TREE_STATE: {{.GIT_TREE_STATE}}"'
      - 'echo "GIT_TAG       : {{.GIT_TAG}}"'

  build:
    desc: Build the application
    vars:
      VERSION: "{{if .GIT_EXACT_TAG}}{{.GIT_EXACT_TAG}}{{end}}"
      LDFLAGS: >-
        -w -s
        -X github.com/wuxler/ruasec/pkg/appinfo.buildDate={{.DATE}}
        -X github.com/wuxler/ruasec/pkg/appinfo.gitBranch={{.GIT_BRANCH}}
        -X github.com/wuxler/ruasec/pkg/appinfo.gitCommit={{.GIT_COMMIT}}
        -X github.com/wuxler/ruasec/pkg/appinfo.gitTag={{.GIT_TAG}}
        -X github.com/wuxler/ruasec/pkg/appinfo.gitTreeState={{.GIT_TREE_STATE}}
        {{if .VERSION}}-X github.com/wuxler/ruasec/pkg/appinfo.version={{.VERSION}}{{end}}
    sources:
      - ./**/*.go
      - Taskfile.yaml
    cmds:
      - go build -ldflags '{{.LDFLAGS}}' -o {{.OUTPUT}}/ruasec{{exeExt}} ./cmd/ruasec

  clean:
    desc: Clean temp files and folders
    cmds:
      - rm -rf {{.OUTPUT}}

  mod:
    desc: Download and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  generate:
    desc: Generate code
    deps: [install:gomock]
    cmds:
      - "{{.BIN_PREFIX}} go generate ./..."

  vet:
    desc: Run go vet against code
    cmds:
      - go vet ./...

  test:
    desc: Runs go test against code
    env:
      CGO_ENABLED: "1" # go test -race requires cgo
    cmds:
      - go test -race -coverprofile=coverage.out -covermode=atomic -cover ./...

  lint:
    desc: Run golangci-lint
    aliases: [l]
    deps: [install:golangci-lint]
    cmds:
      - "{{.BIN_PREFIX}} golangci-lint run --verbose --concurrency 4 --timeout 5m --exclude-dirs-use-default"

  lint:fix:
    desc: Run golangci-lint and fixes linting issues automatically
    deps: [install:golangci-lint]
    cmds:
      - "{{.BIN_PREFIX}} golangci-lint run --verbose --concurrency 4 --timeout 5m --exclude-dirs-use-default --fix"

  install:tools:
    desc: Install all dependent tools
    deps:
      - install:golangci-lint
      - install:goreleaser
      - install:gomock

  install:goreleaser:
    vars:
      VERSION: v1.24.0
    env:
      GOBIN: "{{.BIN}}"
    desc: Install goreleaser@{{.VERSION}} to {{.BIN}}
    status:
      - go version -m {{.BIN}}/goreleaser | grep github.com/goreleaser/goreleaser | grep {{.VERSION}}
    cmds:
      - go install github.com/goreleaser/goreleaser@{{.VERSION}}

  install:golangci-lint:
    vars:
      VERSION: v1.64.7
    env:
      GOBIN: "{{.BIN}}"
    desc: Install golangci-lint@{{.VERSION}} to {{.BIN}}
    status:
      - go version -m {{.BIN}}/golangci-lint | grep github.com/golangci/golangci-lint | grep {{.VERSION}}
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@{{.VERSION}}

  install:gomock:
    vars:
      VERSION: v0.4.0
    env:
      GOBIN: "{{.BIN}}"
    desc: Install mockgen@{{.VERSION}} to {{.BIN}}
    status:
      - go version -m {{.BIN}}/mockgen | grep go.uber.org/mock | grep {{.VERSION}}
    cmds:
      - go install go.uber.org/mock/mockgen@{{.VERSION}}
